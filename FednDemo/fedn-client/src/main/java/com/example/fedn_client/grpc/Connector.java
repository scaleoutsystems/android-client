// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedn.proto

package com.example.fedn_client.grpc;

/**
 * Protobuf service {@code grpc.Connector}
 */
public  abstract class Connector
    implements com.google.protobuf.Service {
  protected Connector() {}

  public interface Interface {
    /**
     * <pre>
     * Stream endpoint for status updates
     * </pre>
     *
     * <code>rpc AllianceStatusStream(.grpc.ClientAvailableMessage) returns (stream .grpc.Status);</code>
     */
    public abstract void allianceStatusStream(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ClientAvailableMessage request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Status> done);

    /**
     * <pre>
     * Report endpoint
     * </pre>
     *
     * <code>rpc SendStatus(.grpc.Status) returns (.grpc.Response);</code>
     */
    public abstract void sendStatus(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Status request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

    /**
     * <pre>
     *    rpc RegisterClient (ClientAvailableMessage) returns (Response);
     * List active clients endpoint
     * </pre>
     *
     * <code>rpc ListActiveClients(.grpc.ListClientsRequest) returns (.grpc.ClientList);</code>
     */
    public abstract void listActiveClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ListClientsRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ClientList> done);

    /**
     * <code>rpc AcceptingClients(.grpc.ConnectionRequest) returns (.grpc.ConnectionResponse);</code>
     */
    public abstract void acceptingClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ConnectionRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ConnectionResponse> done);

    /**
     * <pre>
     * Client messaging to stay engaged.
     * </pre>
     *
     * <code>rpc SendHeartbeat(.grpc.Heartbeat) returns (.grpc.Response);</code>
     */
    public abstract void sendHeartbeat(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Heartbeat request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

    /**
     * <code>rpc ReassignClient(.grpc.ReassignRequest) returns (.grpc.Response);</code>
     */
    public abstract void reassignClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReassignRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

    /**
     * <code>rpc ReconnectClient(.grpc.ReconnectRequest) returns (.grpc.Response);</code>
     */
    public abstract void reconnectClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReconnectRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new Connector() {
      @java.lang.Override
      public  void allianceStatusStream(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.ClientAvailableMessage request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Status> done) {
        impl.allianceStatusStream(controller, request, done);
      }

      @java.lang.Override
      public  void sendStatus(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.Status request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
        impl.sendStatus(controller, request, done);
      }

      @java.lang.Override
      public  void listActiveClients(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.ListClientsRequest request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ClientList> done) {
        impl.listActiveClients(controller, request, done);
      }

      @java.lang.Override
      public  void acceptingClients(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.ConnectionRequest request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ConnectionResponse> done) {
        impl.acceptingClients(controller, request, done);
      }

      @java.lang.Override
      public  void sendHeartbeat(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.Heartbeat request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
        impl.sendHeartbeat(controller, request, done);
      }

      @java.lang.Override
      public  void reassignClient(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.ReassignRequest request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
        impl.reassignClient(controller, request, done);
      }

      @java.lang.Override
      public  void reconnectClient(
          com.google.protobuf.RpcController controller,
          com.example.fedn_client.grpc.ReconnectRequest request,
          com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
        impl.reconnectClient(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.allianceStatusStream(controller, (com.example.fedn_client.grpc.ClientAvailableMessage)request);
          case 1:
            return impl.sendStatus(controller, (com.example.fedn_client.grpc.Status)request);
          case 2:
            return impl.listActiveClients(controller, (com.example.fedn_client.grpc.ListClientsRequest)request);
          case 3:
            return impl.acceptingClients(controller, (com.example.fedn_client.grpc.ConnectionRequest)request);
          case 4:
            return impl.sendHeartbeat(controller, (com.example.fedn_client.grpc.Heartbeat)request);
          case 5:
            return impl.reassignClient(controller, (com.example.fedn_client.grpc.ReassignRequest)request);
          case 6:
            return impl.reconnectClient(controller, (com.example.fedn_client.grpc.ReconnectRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.example.fedn_client.grpc.ClientAvailableMessage.getDefaultInstance();
          case 1:
            return com.example.fedn_client.grpc.Status.getDefaultInstance();
          case 2:
            return com.example.fedn_client.grpc.ListClientsRequest.getDefaultInstance();
          case 3:
            return com.example.fedn_client.grpc.ConnectionRequest.getDefaultInstance();
          case 4:
            return com.example.fedn_client.grpc.Heartbeat.getDefaultInstance();
          case 5:
            return com.example.fedn_client.grpc.ReassignRequest.getDefaultInstance();
          case 6:
            return com.example.fedn_client.grpc.ReconnectRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.example.fedn_client.grpc.Status.getDefaultInstance();
          case 1:
            return com.example.fedn_client.grpc.Response.getDefaultInstance();
          case 2:
            return com.example.fedn_client.grpc.ClientList.getDefaultInstance();
          case 3:
            return com.example.fedn_client.grpc.ConnectionResponse.getDefaultInstance();
          case 4:
            return com.example.fedn_client.grpc.Response.getDefaultInstance();
          case 5:
            return com.example.fedn_client.grpc.Response.getDefaultInstance();
          case 6:
            return com.example.fedn_client.grpc.Response.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <pre>
   * Stream endpoint for status updates
   * </pre>
   *
   * <code>rpc AllianceStatusStream(.grpc.ClientAvailableMessage) returns (stream .grpc.Status);</code>
   */
  public abstract void allianceStatusStream(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.ClientAvailableMessage request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Status> done);

  /**
   * <pre>
   * Report endpoint
   * </pre>
   *
   * <code>rpc SendStatus(.grpc.Status) returns (.grpc.Response);</code>
   */
  public abstract void sendStatus(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.Status request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

  /**
   * <pre>
   *    rpc RegisterClient (ClientAvailableMessage) returns (Response);
   * List active clients endpoint
   * </pre>
   *
   * <code>rpc ListActiveClients(.grpc.ListClientsRequest) returns (.grpc.ClientList);</code>
   */
  public abstract void listActiveClients(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.ListClientsRequest request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ClientList> done);

  /**
   * <code>rpc AcceptingClients(.grpc.ConnectionRequest) returns (.grpc.ConnectionResponse);</code>
   */
  public abstract void acceptingClients(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.ConnectionRequest request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ConnectionResponse> done);

  /**
   * <pre>
   * Client messaging to stay engaged.
   * </pre>
   *
   * <code>rpc SendHeartbeat(.grpc.Heartbeat) returns (.grpc.Response);</code>
   */
  public abstract void sendHeartbeat(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.Heartbeat request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

  /**
   * <code>rpc ReassignClient(.grpc.ReassignRequest) returns (.grpc.Response);</code>
   */
  public abstract void reassignClient(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.ReassignRequest request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

  /**
   * <code>rpc ReconnectClient(.grpc.ReconnectRequest) returns (.grpc.Response);</code>
   */
  public abstract void reconnectClient(
      com.google.protobuf.RpcController controller,
      com.example.fedn_client.grpc.ReconnectRequest request,
      com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.example.fedn_client.grpc.Fedn.getDescriptor().getServices().get(3);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.allianceStatusStream(controller, (com.example.fedn_client.grpc.ClientAvailableMessage)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.Status>specializeCallback(
            done));
        return;
      case 1:
        this.sendStatus(controller, (com.example.fedn_client.grpc.Status)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.Response>specializeCallback(
            done));
        return;
      case 2:
        this.listActiveClients(controller, (com.example.fedn_client.grpc.ListClientsRequest)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.ClientList>specializeCallback(
            done));
        return;
      case 3:
        this.acceptingClients(controller, (com.example.fedn_client.grpc.ConnectionRequest)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.ConnectionResponse>specializeCallback(
            done));
        return;
      case 4:
        this.sendHeartbeat(controller, (com.example.fedn_client.grpc.Heartbeat)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.Response>specializeCallback(
            done));
        return;
      case 5:
        this.reassignClient(controller, (com.example.fedn_client.grpc.ReassignRequest)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.Response>specializeCallback(
            done));
        return;
      case 6:
        this.reconnectClient(controller, (com.example.fedn_client.grpc.ReconnectRequest)request,
          com.google.protobuf.RpcUtil.<com.example.fedn_client.grpc.Response>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.example.fedn_client.grpc.ClientAvailableMessage.getDefaultInstance();
      case 1:
        return com.example.fedn_client.grpc.Status.getDefaultInstance();
      case 2:
        return com.example.fedn_client.grpc.ListClientsRequest.getDefaultInstance();
      case 3:
        return com.example.fedn_client.grpc.ConnectionRequest.getDefaultInstance();
      case 4:
        return com.example.fedn_client.grpc.Heartbeat.getDefaultInstance();
      case 5:
        return com.example.fedn_client.grpc.ReassignRequest.getDefaultInstance();
      case 6:
        return com.example.fedn_client.grpc.ReconnectRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.example.fedn_client.grpc.Status.getDefaultInstance();
      case 1:
        return com.example.fedn_client.grpc.Response.getDefaultInstance();
      case 2:
        return com.example.fedn_client.grpc.ClientList.getDefaultInstance();
      case 3:
        return com.example.fedn_client.grpc.ConnectionResponse.getDefaultInstance();
      case 4:
        return com.example.fedn_client.grpc.Response.getDefaultInstance();
      case 5:
        return com.example.fedn_client.grpc.Response.getDefaultInstance();
      case 6:
        return com.example.fedn_client.grpc.Response.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.example.fedn_client.grpc.Connector implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void allianceStatusStream(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ClientAvailableMessage request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Status> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.example.fedn_client.grpc.Status.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.Status.class,
          com.example.fedn_client.grpc.Status.getDefaultInstance()));
    }

    public  void sendStatus(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Status request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.Response.class,
          com.example.fedn_client.grpc.Response.getDefaultInstance()));
    }

    public  void listActiveClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ListClientsRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ClientList> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.example.fedn_client.grpc.ClientList.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.ClientList.class,
          com.example.fedn_client.grpc.ClientList.getDefaultInstance()));
    }

    public  void acceptingClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ConnectionRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.ConnectionResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.example.fedn_client.grpc.ConnectionResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.ConnectionResponse.class,
          com.example.fedn_client.grpc.ConnectionResponse.getDefaultInstance()));
    }

    public  void sendHeartbeat(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Heartbeat request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.Response.class,
          com.example.fedn_client.grpc.Response.getDefaultInstance()));
    }

    public  void reassignClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReassignRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.Response.class,
          com.example.fedn_client.grpc.Response.getDefaultInstance()));
    }

    public  void reconnectClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReconnectRequest request,
        com.google.protobuf.RpcCallback<com.example.fedn_client.grpc.Response> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.fedn_client.grpc.Response.class,
          com.example.fedn_client.grpc.Response.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.example.fedn_client.grpc.Status allianceStatusStream(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ClientAvailableMessage request)
        throws com.google.protobuf.ServiceException;

    public com.example.fedn_client.grpc.Response sendStatus(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Status request)
        throws com.google.protobuf.ServiceException;

    public com.example.fedn_client.grpc.ClientList listActiveClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ListClientsRequest request)
        throws com.google.protobuf.ServiceException;

    public com.example.fedn_client.grpc.ConnectionResponse acceptingClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ConnectionRequest request)
        throws com.google.protobuf.ServiceException;

    public com.example.fedn_client.grpc.Response sendHeartbeat(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Heartbeat request)
        throws com.google.protobuf.ServiceException;

    public com.example.fedn_client.grpc.Response reassignClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReassignRequest request)
        throws com.google.protobuf.ServiceException;

    public com.example.fedn_client.grpc.Response reconnectClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReconnectRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.example.fedn_client.grpc.Status allianceStatusStream(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ClientAvailableMessage request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.Status) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.example.fedn_client.grpc.Status.getDefaultInstance());
    }


    public com.example.fedn_client.grpc.Response sendStatus(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Status request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.Response) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance());
    }


    public com.example.fedn_client.grpc.ClientList listActiveClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ListClientsRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.ClientList) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.example.fedn_client.grpc.ClientList.getDefaultInstance());
    }


    public com.example.fedn_client.grpc.ConnectionResponse acceptingClients(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ConnectionRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.ConnectionResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.example.fedn_client.grpc.ConnectionResponse.getDefaultInstance());
    }


    public com.example.fedn_client.grpc.Response sendHeartbeat(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.Heartbeat request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.Response) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance());
    }


    public com.example.fedn_client.grpc.Response reassignClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReassignRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.Response) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance());
    }


    public com.example.fedn_client.grpc.Response reconnectClient(
        com.google.protobuf.RpcController controller,
        com.example.fedn_client.grpc.ReconnectRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.example.fedn_client.grpc.Response) channel.callBlockingMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.example.fedn_client.grpc.Response.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:grpc.Connector)
}

